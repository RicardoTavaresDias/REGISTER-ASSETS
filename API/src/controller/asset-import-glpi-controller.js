/*
  # RealizarÃ¡ leitura da planilha excel tratar os dados.
  # Manipular glpi para verificaÃ§Ã£o se jÃ¡ existe o nÃºmero de seria na unidade.
  # Se tiver numero de serie eliminar o numero de serie que veio da planilha.
  # O que nÃ£o tiver numero de serie realizar cadastro do mesmo.
  # O setor que nÃ£o existir na lista do glpi passar para usuario cadastrar manualmente.
  # Informar usuarios os numero de serie cadastrados, rejeitados existentes e os numeros que deve cadastrar manualmente.
*/

/*
  # Criar arquivo separado para manipulaÃ§Ã£o glpi - 1Â° responsabilidade
  # Criar arquivo separado para manipular arquivos junto com a planilha, 
    verificando quais serÃ¡ necessario cadastrar manualmente devido setor, 
    os setores que nÃ£o existe - 2Â° responsabilidade.
  # Criar um arquivo para verificar se o numeros de serie jÃ¡ existe no glpi - 3Â° responsabilidade
  # Criar arquivo para cadastrar os numeros de serie no glpi - 4Â° responsabilidade
*/

/*
  OBSERVAÃ‡Ã‚O:
  ðŸ“‹Planejar como serÃ¡ relaÃ§Ã£o a unidade no cadastro da planilha excel pois necessita inclusÃ£o no sitema

  Outro Exemplo de arquivos e pastas

/*
ðŸ’¡
  src/
  â”œâ”€â”€ controller/
  â”‚   â””â”€â”€ âœ… asset-import-glpi-controller.js         # Controla o fluxo da importaÃ§Ã£o
  â”‚   â”œâ”€â”€ login-controller.js
  â”‚   â”œâ”€â”€ logs-controller.js
  â”‚   â”œâ”€â”€ register-assets-controller.js
  â”‚   â”œâ”€â”€ suggestions-search-controller.js
  â”‚
  â”œâ”€â”€ routers/
  â”‚   â””â”€â”€ âœ… asset-import-glpi-router.js             # Define rota de importaÃ§Ã£o
  â”‚   â”œâ”€â”€ assets-router.js
  â”‚   â”œâ”€â”€ index.js
  â”‚   â”œâ”€â”€ login-router.js
  â”‚   â”œâ”€â”€ logs-router.js
  â”‚   â”œâ”€â”€ suggestions-router.js 
  â”‚
  â”œâ”€â”€ services/
  â”‚   â”œâ”€â”€ CrudFile.js
  â”‚   â”œâ”€â”€ log-RegisterAssets.js
  â”‚   â”œâ”€â”€ âœ… csv-reader.js              # LÃª arquivo CSV
  â”‚   â”œâ”€â”€ âœ… asset-processor.js         # Processa dados do CSV
  â”‚   â”œâ”€â”€ âœ… glpi-validator.js          # Valida existÃªncia no GLPI
  â”‚   â”œâ”€â”€ âœ… glpi-inserter.js           # Cadastra no GLPI
  â”‚   â”œâ”€â”€ âœ… manual-review-logger.js    # Armazena dados invÃ¡lidos p/ revisÃ£o
  â”‚
  â”œâ”€â”€ files/
  â”‚   â”œâ”€â”€ ativos.csv                            # Arquivo com os dados de entrada
  â”‚   â””â”€â”€ âœ… pendentes-para-cadastro.json       # SaÃ­da para cadastro manual
  â”‚
  â”œâ”€â”€ routers/index.js                       # Onde vocÃª adiciona as rotas
*/
import { CsvReader } from "../services/Csv-reader.js"
import { manualReviewLogger } from "../services/manual-review-logger.js"
import { Validatorglpi } from "../services/Validator-glpi.js"
import { assetProcessor } from "../services/asset-processor.js"

export class AssetsImportGlpiController {
  async create(request, response){
    const cvsData = new CsvReader().csvData()
    const {computer, monitor } = assetProcessor(cvsData)
    const validatorglpi = new Validatorglpi(monitor)
    const { existsAssets, doesNotExistsAssets } = await validatorglpi.glpiAssets()

    //const validatorPrinter = await glpiValidator({ data: monitor, path:  })

    manualReviewLogger(existsAssets, doesNotExistsAssets)
    response.status(200).json({ message: "ok" })
  }
}