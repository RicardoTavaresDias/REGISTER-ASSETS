generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Sector {
  id Int @id @default(autoincrement())
  idTypeSector Int? @map("id_type_sector")
  idLogSectorInvalid Int? @map("id_log_sector_invalid")

  asset Asset[]
  typeSector Type_Sector? @relation(fields: [idTypeSector], references: [id], onDelete: Cascade)
  logSectorInvalid Log_Sector_invalid? @relation(fields: [idLogSectorInvalid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("sector")
}

model Type_Sector {
  id Int @id @default(autoincrement())
  name String
  idglpi String @map("id_glpi")

  sector Sector[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("type_sector")
}

model Log_Sector_invalid {
  id Int @id @default(autoincrement())
  name String

  sector Sector[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("log_sector_invalid")
}

model Equipment {
  id Int @id @default(autoincrement())
  idTypeEquipment Int? @map("id_type_equipment")
  serie String
  idLogEquipmentInvalid Int? @map("id_log_equipment_invalid")
  
  asset Asset[]
  typeEquipment Type_Equipment? @relation(fields: [idTypeEquipment], references: [id], onDelete: Cascade)
  logEquipmentInvalid Log_Equipment_invalid? @relation(fields: [idLogEquipmentInvalid], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("equipment")
}

model Type_Equipment {
  id Int @id @default(autoincrement())
  name String

  equipment Equipment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
  @@map("type_equipment")
}

model Log_Equipment_invalid {
  id Int @id @default(autoincrement())
  name String

  equipment Equipment[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@map("log_equipment_invalid")
}

model Unit {
  id Int @id @default(autoincrement())
  name String

  asset Asset[]

  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime? @updatedAt @map("updated_at")
  @@map("unit")
}

model Asset {
  id Int @id @default(autoincrement())
  idsector Int @map("id_sector")
  idequipment Int @map("id_equipment")
  idunit Int @map("id_unit")

  sector Sector @relation(fields: [idsector], references: [id], onDelete: Cascade)
  equipment Equipment  @relation(fields: [idequipment], references: [id], onDelete: Cascade)
  unit Unit @relation(fields: [idunit], references: [id], onDelete: Cascade)


  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime? @updatedAt @map("updated_at")
  @@map("asset")
}


enum Role {
  member
  admin
}

model User {
  id Int @id @default(autoincrement())
  user String
  password String
  role Role @default(member)
  
  createAt DateTime @default(now()) @map("created_at")
  updateAt DateTime? @updatedAt @map("updated_at")
  @@map("user")
}